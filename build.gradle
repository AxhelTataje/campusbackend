buildscript {
	ext {
		springBootVersion = '1.3.6.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.0'
		classpath('se.transmode.gradle:gradle-docker:1.2')
		classpath 'org.ajoberstar:grgit:1.1.0'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'docker'


project.version = '2.0.0.0'

jar {
	baseName = 'campus-backend'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


ext {
	snippetsDir = file('build/generated-snippets')
}

ext['spring-restdocs.version'] = '1.2.0.BUILD-SNAPSHOT'
ext['spring.version']='4.3.1.RELEASE'


repositories {
	mavenCentral()
	mavenLocal()
	maven  {
		url "http://200.123.0.72:8081/nexus/content/repositories/thirdparty"
	}
}


dependencies {
	// log
	compile ('log4j:log4j:1.2.17')
	// spring
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-mail')
	
	compile('org.springframework.cloud:spring-cloud-starter-config:1.0.3.RELEASE') { exclude(group: 'ch.qos.logback') }
	
	compile('org.apache.poi:poi-ooxml:3.10.1')
	compile('org.springframework:spring-jdbc')
	compile('org.projectlombok:lombok:1.12.6')
	runtime('mysql:mysql-connector-java')
	compile('org.springframework.hateoas:spring-hateoas:0.19.0.RELEASE')

	compile('net.sf.dozer:dozer:5.5.1')
	compile('joda-time:joda-time:2.1')
	compile('org.reflections:reflections:0.9.10')
	
	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
	compile group: 'org.json', name: 'json', version: '20160212'
	compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.22.2'

	testCompile "org.codehaus.groovy:groovy-all:2.4.1"
	testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
	testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'

	// optional dependencies for using Spock
	testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
	testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
	testRuntime "org.objenesis:objenesis:2.1"    //

	testCompile( 'com.athaydes:spock-reports:1.2.10' ) {
		transitive = false // this avoids affecting your version of Groovy/Spock
	}

	// google gson
	compile('com.google.code.gson:gson:2.6.2')
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
	// testing
	testCompile('org.springframework.boot:spring-boot-starter-test')

	//rest docs
	testCompile  "org.springframework.restdocs:spring-restdocs-restassured:${project.ext['spring-restdocs.version']}"
	testCompile 'com.jayway.jsonpath:json-path'
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

sourceSets {
	funcTests {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

ext['hibernate.version'] = '5.0.7.Final'

configurations {
	funcTestsCompile.extendsFrom testCompile
	funcTestsRuntime.extendsFrom testRuntime
}

task funcTests(type: Test) {
	testClassesDir = sourceSets.funcTests.output.classesDir
	classpath = sourceSets.funcTests.runtimeClasspath
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}

bootRun {
	addResources = true
}

springBoot {
	mainClass = "pe.joedayz.api.ApiApplication"
}

asciidoctor {
	options = [
			attributes: [
					'allow-uri-read': ''
			]
	]
	
}

group = 'joedayz'
task buildDocker(type: Docker, dependsOn: assemble) {
	push = false
	applicationName = jar.baseName
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}


def getGitBranchCommit() {
	try {
		def git = org.ajoberstar.grgit.Grgit.open(file('.'))
		def revision = git.head().abbreviatedId
		return revision
	} catch (IOException ex) {
		return "UNKNOWN"
	}

}



task printVersion {
	// any code that goes here is part of configuring the task
	// this code will always get run, even if the task is not executed
	doLast { // add a task action
		// any code that goes here is part of executing the task
		// this code will only get run if and when the task gets executed
		println project.version
	}
}

task buildInfo {
	println project.version + "-" + getGitBranchCommit()
}
